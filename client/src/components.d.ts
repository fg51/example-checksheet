/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface AppFooter {
    }
    interface AppHome {
    }
    interface AppProfile {
        "name": string;
    }
    interface AppRoot {
    }
    interface InputCountry {
        /**
          * value is property.
         */
        "value": string;
    }
    interface InputModel {
        /**
          * initialValue is placeholder.
         */
        "initialValue": string;
        /**
          * items is selectable items.
         */
        "items": string[];
        /**
          * labelTitle is title.
         */
        "labelTitle": string;
        /**
          * value is selected item.
         */
        "value": string;
    }
    interface InputSerial {
        /**
          * serial is serial number.
         */
        "serial": string;
    }
    interface InputSour {
        /**
          * sour is value.
         */
        "value": string;
    }
    interface InputStandard {
        /**
          * value is value.
         */
        "value": string;
    }
    interface InputSweet {
        /**
          * sweet is value.
         */
        "value": string;
    }
    interface InputVisual {
        /**
          * state is defalut state.
         */
        "state": boolean;
    }
    interface InputWeight {
        /**
          * state is defalut state.
         */
        "state": boolean;
    }
    interface WorkNumber {
        /**
          * value is work number.
         */
        "value": string;
    }
}
declare global {
    interface HTMLAppFooterElement extends Components.AppFooter, HTMLStencilElement {
    }
    var HTMLAppFooterElement: {
        prototype: HTMLAppFooterElement;
        new (): HTMLAppFooterElement;
    };
    interface HTMLAppHomeElement extends Components.AppHome, HTMLStencilElement {
    }
    var HTMLAppHomeElement: {
        prototype: HTMLAppHomeElement;
        new (): HTMLAppHomeElement;
    };
    interface HTMLAppProfileElement extends Components.AppProfile, HTMLStencilElement {
    }
    var HTMLAppProfileElement: {
        prototype: HTMLAppProfileElement;
        new (): HTMLAppProfileElement;
    };
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLInputCountryElement extends Components.InputCountry, HTMLStencilElement {
    }
    var HTMLInputCountryElement: {
        prototype: HTMLInputCountryElement;
        new (): HTMLInputCountryElement;
    };
    interface HTMLInputModelElement extends Components.InputModel, HTMLStencilElement {
    }
    var HTMLInputModelElement: {
        prototype: HTMLInputModelElement;
        new (): HTMLInputModelElement;
    };
    interface HTMLInputSerialElement extends Components.InputSerial, HTMLStencilElement {
    }
    var HTMLInputSerialElement: {
        prototype: HTMLInputSerialElement;
        new (): HTMLInputSerialElement;
    };
    interface HTMLInputSourElement extends Components.InputSour, HTMLStencilElement {
    }
    var HTMLInputSourElement: {
        prototype: HTMLInputSourElement;
        new (): HTMLInputSourElement;
    };
    interface HTMLInputStandardElement extends Components.InputStandard, HTMLStencilElement {
    }
    var HTMLInputStandardElement: {
        prototype: HTMLInputStandardElement;
        new (): HTMLInputStandardElement;
    };
    interface HTMLInputSweetElement extends Components.InputSweet, HTMLStencilElement {
    }
    var HTMLInputSweetElement: {
        prototype: HTMLInputSweetElement;
        new (): HTMLInputSweetElement;
    };
    interface HTMLInputVisualElement extends Components.InputVisual, HTMLStencilElement {
    }
    var HTMLInputVisualElement: {
        prototype: HTMLInputVisualElement;
        new (): HTMLInputVisualElement;
    };
    interface HTMLInputWeightElement extends Components.InputWeight, HTMLStencilElement {
    }
    var HTMLInputWeightElement: {
        prototype: HTMLInputWeightElement;
        new (): HTMLInputWeightElement;
    };
    interface HTMLWorkNumberElement extends Components.WorkNumber, HTMLStencilElement {
    }
    var HTMLWorkNumberElement: {
        prototype: HTMLWorkNumberElement;
        new (): HTMLWorkNumberElement;
    };
    interface HTMLElementTagNameMap {
        "app-footer": HTMLAppFooterElement;
        "app-home": HTMLAppHomeElement;
        "app-profile": HTMLAppProfileElement;
        "app-root": HTMLAppRootElement;
        "input-country": HTMLInputCountryElement;
        "input-model": HTMLInputModelElement;
        "input-serial": HTMLInputSerialElement;
        "input-sour": HTMLInputSourElement;
        "input-standard": HTMLInputStandardElement;
        "input-sweet": HTMLInputSweetElement;
        "input-visual": HTMLInputVisualElement;
        "input-weight": HTMLInputWeightElement;
        "work-number": HTMLWorkNumberElement;
    }
}
declare namespace LocalJSX {
    interface AppFooter {
    }
    interface AppHome {
    }
    interface AppProfile {
        "name"?: string;
    }
    interface AppRoot {
    }
    interface InputCountry {
        /**
          * value is property.
         */
        "value"?: string;
    }
    interface InputModel {
        /**
          * initialValue is placeholder.
         */
        "initialValue"?: string;
        /**
          * items is selectable items.
         */
        "items"?: string[];
        /**
          * labelTitle is title.
         */
        "labelTitle"?: string;
        /**
          * value is selected item.
         */
        "value"?: string;
    }
    interface InputSerial {
        /**
          * serial is serial number.
         */
        "serial"?: string;
    }
    interface InputSour {
        /**
          * sour is value.
         */
        "value"?: string;
    }
    interface InputStandard {
        /**
          * value is value.
         */
        "value"?: string;
    }
    interface InputSweet {
        /**
          * sweet is value.
         */
        "value"?: string;
    }
    interface InputVisual {
        /**
          * state is defalut state.
         */
        "state"?: boolean;
    }
    interface InputWeight {
        /**
          * state is defalut state.
         */
        "state"?: boolean;
    }
    interface WorkNumber {
        /**
          * value is work number.
         */
        "value"?: string;
    }
    interface IntrinsicElements {
        "app-footer": AppFooter;
        "app-home": AppHome;
        "app-profile": AppProfile;
        "app-root": AppRoot;
        "input-country": InputCountry;
        "input-model": InputModel;
        "input-serial": InputSerial;
        "input-sour": InputSour;
        "input-standard": InputStandard;
        "input-sweet": InputSweet;
        "input-visual": InputVisual;
        "input-weight": InputWeight;
        "work-number": WorkNumber;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-footer": LocalJSX.AppFooter & JSXBase.HTMLAttributes<HTMLAppFooterElement>;
            "app-home": LocalJSX.AppHome & JSXBase.HTMLAttributes<HTMLAppHomeElement>;
            "app-profile": LocalJSX.AppProfile & JSXBase.HTMLAttributes<HTMLAppProfileElement>;
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
            "input-country": LocalJSX.InputCountry & JSXBase.HTMLAttributes<HTMLInputCountryElement>;
            "input-model": LocalJSX.InputModel & JSXBase.HTMLAttributes<HTMLInputModelElement>;
            "input-serial": LocalJSX.InputSerial & JSXBase.HTMLAttributes<HTMLInputSerialElement>;
            "input-sour": LocalJSX.InputSour & JSXBase.HTMLAttributes<HTMLInputSourElement>;
            "input-standard": LocalJSX.InputStandard & JSXBase.HTMLAttributes<HTMLInputStandardElement>;
            "input-sweet": LocalJSX.InputSweet & JSXBase.HTMLAttributes<HTMLInputSweetElement>;
            "input-visual": LocalJSX.InputVisual & JSXBase.HTMLAttributes<HTMLInputVisualElement>;
            "input-weight": LocalJSX.InputWeight & JSXBase.HTMLAttributes<HTMLInputWeightElement>;
            "work-number": LocalJSX.WorkNumber & JSXBase.HTMLAttributes<HTMLWorkNumberElement>;
        }
    }
}
